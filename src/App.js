import React, { useState, useEffect } from 'react';
import { PieChart, Pie, Cell, Legend, ResponsiveContainer } from 'recharts';

const COLORS = ['#4ade80', '#fbbf24', '#f87171'];

const StickFigure = ({ type }) => {
  const color = type === 'affected' ? 'text-red-500' : (type === 'carrier' ? 'text-yellow-500' : 'text-green-500');
  return (
    <div className={inline-block mx-1 ${color}}>
      {type === 'affected' ? 'üòû' : (type === 'carrier' ? 'üòê' : 'üòä')}
    </div>
  );
};

const getFraction = (decimal) => {
  if (decimal === 0) return '0';
  if (decimal === 1) return '1';
  const tolerance = 1.0E-6;
  let h1 = 1, h2 = 0, k1 = 0, k2 = 1;
  let b = decimal;
  do {
    let a = Math.floor(b);
    let aux = h1; h1 = a * h1 + h2; h2 = aux;
    aux = k1; k1 = a * k1 + k2; k2 = aux;
    b = 1 / (b - a);
  } while (Math.abs(decimal - h1 / k1) > decimal * tolerance);
  return ${h1}/${k1};
};

const parseFraction = (fraction) => {
  const [numerator, denominator] = fraction.split('/').map(Number);
  return numerator / denominator;
};

const ThaiGeneticProbabilityCalculator = () => {
  const [step, setStep] = useState(0);
  const [parent1Fraction, setParent1Fraction] = useState('1/4');
  const [parent2Fraction, setParent2Fraction] = useState('1/4');
  const [outcomes, setOutcomes] = useState({ normal: '0', carrier: '0', affected: '0', bothCarriers: '0', oneCarrier: '0', noCarriers: '0' });

  useEffect(() => {
    calculateOutcomes();
  }, [parent1Fraction, parent2Fraction]);

  const calculateOutcomes = () => {
    const p1 = parseFraction(parent1Fraction);
    const p2 = parseFraction(parent2Fraction);
    const q1 = 1 - p1, q2 = 1 - p2;

    const bothCarriers = p1 * p2;
    const oneCarrier = p1 * q2 + q1 * p2;
    const noCarriers = q1 * q2;

    const affectedProb = bothCarriers * 0.25;
    const carrierProb = (bothCarriers * 0.5) + (oneCarrier * 0.5);
    const normalProb = 1 - affectedProb - carrierProb;

    setOutcomes({
      normal: getFraction(normalProb),
      carrier: getFraction(carrierProb),
      affected: getFraction(affectedProb),
      bothCarriers: getFraction(bothCarriers),
      oneCarrier: getFraction(oneCarrier),
      noCarriers: getFraction(noCarriers)
    });
  };

  const Step = ({ title, children }) => (
    <div className="bg-blue-100 p-4 rounded-lg mb-4">
      <h3 className="text-lg font-bold mb-2">{title}</h3>
      {children}
    </div>
  );

  const ParentScenario = ({ scenario, probability }) => (
    <div>
      <p>{scenario}</p>
      <div className="flex">
        <StickFigure type={scenario.includes('‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà') ? 'carrier' : 'normal'} />
        <StickFigure type={scenario.includes('‡πÑ‡∏°‡πà') ? 'normal' : 'carrier'} />
      </div>
      <p>‡πÇ‡∏≠‡∏Å‡∏≤‡∏™: {probability}</p>
    </div>
  );

  const ChildScenario = ({ scenario, outcomes }) => (
    <div>
      <p>{scenario}</p>
      <div className="flex">
        {outcomes.map((type, index) => <StickFigure key={index} type={type} />)}
      </div>
      <p>{outcomes.filter(o => o === 'normal').length}/4 ‡∏õ‡∏Å‡∏ï‡∏¥, 
         {outcomes.filter(o => o === 'carrier').length}/4 ‡∏û‡∏≤‡∏´‡∏∞, 
         {outcomes.filter(o => o === 'affected').length}/4 ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ</p>
    </div>
  );

  return (
    <div className="p-4">
      <h1 className="text-3xl font-bold mb-4">‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏™‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡πÇ‡∏£‡∏Ñ‡πÅ‡∏•‡∏∞‡∏û‡∏≤‡∏´‡∏∞‡πÇ‡∏£‡∏Ñ‡∏¢‡∏µ‡∏ô‡∏î‡πâ‡∏≠‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏´‡∏∞</h1>
      
      <Step title="‡∏Ç‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà 0: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏û‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏´‡∏∞">
        <p>‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏û‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡πà‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏´‡∏∞‡∏Ç‡∏≠‡∏á‡∏¢‡∏µ‡∏ô‡∏î‡πâ‡∏≠‡∏¢ (‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏®‡∏©‡∏™‡πà‡∏ß‡∏ô):</p>
        <div className="mb-4">
          <label className="block mb-2">‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏û‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏´‡∏∞:</label>
          <input 
            type="text" 
            value={parent1Fraction} 
            onChange={(e) => setParent1Fraction(e.target.value)}
            className="w-full p-2 rounded mb-2"
            placeholder="‡πÉ‡∏™‡πà‡πÄ‡∏®‡∏©‡∏™‡πà‡∏ß‡∏ô (‡πÄ‡∏ä‡πà‡∏ô 1/4)"
          />
          <label className="block mb-2">‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏´‡∏∞:</label>
          <input 
            type="text" 
            value={parent2Fraction} 
            onChange={(e) => setParent2Fraction(e.target.value)}
            className="w-full p-2 rounded"
            placeholder="‡πÉ‡∏™‡πà‡πÄ‡∏®‡∏©‡∏™‡πà‡∏ß‡∏ô (‡πÄ‡∏ä‡πà‡∏ô 1/4)"
          />
        </div>
      </Step>

      {step >= 1 && (
        <Step title="‡∏Ç‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏´‡∏∞‡∏Ç‡∏≠‡∏á‡∏û‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡πà">
          <p>‡∏à‡∏≤‡∏Å‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ:</p>
          <div className="flex justify-around">
            <ParentScenario scenario="‡∏û‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏´‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà" probability={outcomes.bothCarriers} />
            <ParentScenario scenario="‡∏û‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏´‡∏∞" probability={outcomes.oneCarrier} />
            <ParentScenario scenario="‡∏û‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏´‡∏∞" probability={outcomes.noCarriers} />
          </div>
          <p className="mt-2">‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì:</p>
          <ul className="list-disc list-inside">
            <li>‡∏û‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏´‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà: {parent1Fraction} √ó {parent2Fraction} = {outcomes.bothCarriers}</li>
            <li>‡∏û‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏´‡∏∞: ({parent1Fraction} √ó (1 - {parent2Fraction})) + ((1 - {parent1Fraction}) √ó {parent2Fraction}) = {outcomes.oneCarrier}</li>
            <li>‡∏û‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏´‡∏∞: (1 - {parent1Fraction}) √ó (1 - {parent2Fraction}) = {outcomes.noCarriers}</li>
          </ul>
        </Step>
      )}

      {step >= 2 && (
        <Step title="‡∏Ç‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà 2: ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå">
          <div className="flex justify-around">
            <ChildScenario scenario="‡∏û‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏´‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà" outcomes={['normal', 'carrier', 'carrier', 'affected']} />
            <ChildScenario scenario="‡∏û‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏´‡∏∞" outcomes={['normal', 'normal', 'carrier', 'carrier']} />
            <ChildScenario scenario="‡∏û‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏´‡∏∞" outcomes={['normal', 'normal', 'normal', 'normal']} />
          </div>
          <p className="mt-2">‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ 1/2 ‡πÅ‡∏•‡∏∞ 1/4:</p>
          <ul className="list-disc list-inside">
            <li>‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏´‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà ‡∏•‡∏π‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ 1/4 ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ (aa), 1/2 ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏´‡∏∞ (Aa), ‡πÅ‡∏•‡∏∞ 1/4 ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏õ‡∏Å‡∏ï‡∏¥ (AA)</li>
            <li>‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ 1/2 ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏´‡∏∞‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏™‡∏≠‡∏á‡∏Å‡∏£‡∏ì‡∏µ: ‡πÑ‡∏î‡πâ‡∏¢‡∏µ‡∏ô A ‡∏à‡∏≤‡∏Å‡∏û‡πà‡∏≠‡πÅ‡∏•‡∏∞ a ‡∏à‡∏≤‡∏Å‡πÅ‡∏°‡πà, ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏î‡πâ‡∏¢‡∏µ‡∏ô a ‡∏à‡∏≤‡∏Å‡∏û‡πà‡∏≠‡πÅ‡∏•‡∏∞ A ‡∏à‡∏≤‡∏Å‡πÅ‡∏°‡πà</li>
            <li>‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏´‡∏∞‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏•‡∏π‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ 1/2 ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏´‡∏∞‡πÅ‡∏•‡∏∞ 1/2 ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏õ‡∏Å‡∏ï‡∏¥</li>
          </ul>
        </Step>
      )}

      {step >= 3 && (
        <Step title="‡∏Ç‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°">
          <p>‡∏°‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏™‡πà:</p>
          <div className="bg-yellow-200 p-2 rounded mb-2">
            <p>‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ: (‡∏û‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏´‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà) √ó 1/4 = {outcomes.bothCarriers} √ó 1/4 = {outcomes.affected}</p>
            <p>‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏´‡∏∞: (‡∏û‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏´‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà √ó 1/2) + (‡∏û‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏´‡∏∞ √ó 1/2) = ({outcomes.bothCarriers} √ó 1/2) + ({outcomes.oneCarrier} √ó 1/2) = {outcomes.carrier}</p>
            <p>‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏õ‡∏Å‡∏ï‡∏¥: 1 - (‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ + ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏´‡∏∞) = 1 - ({outcomes.affected} + {outcomes.carrier}) = {outcomes.normal}</p>
          </div>
          <p className="mt-2">‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏£‡∏ß‡∏°‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏à‡∏≤‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà 1 ‡πÅ‡∏•‡∏∞ 2 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏≤‡∏á‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å</p>
        </Step>
      )}

      {step >= 4 && (
        <Step title="‡∏Ç‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏û">
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie
                data={Object.entries(outcomes).slice(0, 3).map(([name, value]) => ({ name, value: parseFraction(value) }))}
                cx="50%"
                cy="50%"
                labelLine={false}
                outerRadius={80}
                fill="#8884d8"
                dataKey="value"
                label={({ name, value }) => ${name === 'normal' ? '‡∏õ‡∏Å‡∏ï‡∏¥' : name === 'carrier' ? '‡∏û‡∏≤‡∏´‡∏∞' : '‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ'}: ${getFraction(value)}}
              >
                {Object.entries(outcomes).slice(0, 3).map((entry, index) => (
                  <Cell key={cell-${index}} fill={COLORS[index % COLORS.length]} />
                ))}
              </Pie>
              <Legend formatter={(value) => value === 'normal' ? '‡∏õ‡∏Å‡∏ï‡∏¥' : value === 'carrier' ? '‡∏û‡∏≤‡∏´‡∏∞' : '‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ'} />
            </PieChart>
          </ResponsiveContainer>
          <p className="mt-2">‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏®‡∏©‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: ‡∏õ‡∏Å‡∏ï‡∏¥ ({outcomes.normal}), ‡∏û‡∏≤‡∏´‡∏∞ ({outcomes.carrier}), ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ ({outcomes.affected})</p>
        </Step>
      )}

<div className="mt-4">
        {step < 4 ? (
          <button 
            className="bg-blue-500 text-white p-2 rounded"
            onClick={() => setStep(step + 1)}
          >
            ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
          </button>
        ) : (
          <button 
            className="bg-green-500 text-white p-2 rounded"
            onClick={() => setStep(0)}
          >
            ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
          </button>
        )}
      </div>
    </div>
  );
};

export default ThaiGeneticProbabilityCalculator;
